# .github/workflows/release.yml

name: Create Release Build

# This workflow triggers when a new tag starting with 'v' is pushed.
# For example: git tag v0.1.0 && git push origin v0.1.0
on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    name: Create Release for ${{ matrix.os }}
    # Use a matrix strategy to build on all three major platforms.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install the Rust toolchain.
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Install platform-specific dependencies required for Freya.
      # This is the most critical step for GUI applications.
      - name: Install System Dependencies
        run: |
          # Linux (Ubuntu) requires several development libraries for rendering and windowing.
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librust-appindicator-dev libayatana-appindicator3-dev pkg-config libssl-dev libglib2.0-dev libgdk-pixbuf2.0-dev libcairo2-dev
          # macOS and Windows runners usually have the necessary components pre-installed.
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "No specific dependencies needed for macOS."
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "No specific dependencies needed for Windows (MSVC toolchain is available)."
          fi
        shell: bash

      # Step 4: Build the application in release mode.
      - name: Build Application
        run: cargo build --release

      # Step 5: Prepare the artifact for upload.
      # We need to handle different executable names and paths for each OS.
      - name: Prepare Artifact
        run: |
          # Set the path and name for the final binary based on the OS.
          if [ "$RUNNER_OS" == "Linux" ]; then
            ARTIFACT_PATH="target/release/freya-hn-app"
            ARTIFACT_NAME="freya-hn-app-linux"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            ARTIFACT_PATH="target/release/freya-hn-app"
            ARTIFACT_NAME="freya-hn-app-macos"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            ARTIFACT_PATH="target/release/freya-hn-app.exe"
            ARTIFACT_NAME="freya-hn-app-windows.exe"
          fi
          # Use GITHUB_ENV to make these variables available to the next step.
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
        shell: bash

      # Step 6: Upload the compiled binary as a workflow artifact.
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
